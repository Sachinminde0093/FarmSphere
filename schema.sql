-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.comments
(
    comment_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    post_id uuid,
    user_id uuid NOT NULL,
    content character varying COLLATE pg_catalog."default" NOT NULL,
    like_count integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT comments_pkey PRIMARY KEY (comment_id)
);

CREATE TABLE IF NOT EXISTS public.conversations
(
    conversation_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    user1id uuid NOT NULL,
    user2id uuid NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT conversations_pkey PRIMARY KEY (conversation_id),
    CONSTRAINT conversations_user1id_user2id_key UNIQUE (user1id, user2id)
);

CREATE TABLE IF NOT EXISTS public.files
(
    file_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    post_id uuid,
    user_id uuid,
    extension character varying(50) COLLATE pg_catalog."default" NOT NULL,
    type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    order_no integer NOT NULL,
    key character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT files_pkey PRIMARY KEY (file_id)
);

CREATE TABLE IF NOT EXISTS public.likes
(
    like_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    post_id uuid,
    comment_id uuid,
    user_id uuid,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT likes_pkey PRIMARY KEY (like_id)
);

CREATE TABLE IF NOT EXISTS public.messages
(
    message_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    conversation_id uuid NOT NULL,
    senderuser_id uuid NOT NULL,
    receiveruser_id uuid NOT NULL,
    content text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT messages_pkey PRIMARY KEY (message_id)
);

CREATE TABLE IF NOT EXISTS public.posts
(
    post_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    user_id uuid NOT NULL,
    title character varying COLLATE pg_catalog."default" NOT NULL,
    body text COLLATE pg_catalog."default",
    like_count integer DEFAULT 0,
    share_count integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT posts_pkey PRIMARY KEY (post_id)
);

CREATE TABLE IF NOT EXISTS public.userrelations
(
    relationship_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    senderuser_id uuid NOT NULL,
    receiveruser_id uuid NOT NULL,
    relationship_type character varying(20) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    status boolean NOT NULL,
    CONSTRAINT userrelations_pkey PRIMARY KEY (relationship_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    username character varying(255) COLLATE pg_catalog."default",
    first_name character varying(255) COLLATE pg_catalog."default",
    last_name character varying(255) COLLATE pg_catalog."default",
    acc_type smallint NOT NULL DEFAULT 1,
    profile_photo character varying(255) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    bio character varying(256) COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_username_key UNIQUE (username)
);

ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (post_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.conversations
    ADD CONSTRAINT conversations_user1id_fkey FOREIGN KEY (user1id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.conversations
    ADD CONSTRAINT conversations_user2id_fkey FOREIGN KEY (user2id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.files
    ADD CONSTRAINT files_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (post_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.files
    ADD CONSTRAINT files_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT likes_comment_id_fkey FOREIGN KEY (comment_id)
    REFERENCES public.comments (comment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT likes_post_id_fkey FOREIGN KEY (post_id)
    REFERENCES public.posts (post_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT likes_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT messages_conversation_id_fkey FOREIGN KEY (conversation_id)
    REFERENCES public.conversations (conversation_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT messages_receiveruser_id_fkey FOREIGN KEY (receiveruser_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT messages_senderuser_id_fkey FOREIGN KEY (senderuser_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.posts
    ADD CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.userrelations
    ADD CONSTRAINT userrelations_receiveruser_id_fkey FOREIGN KEY (receiveruser_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.userrelations
    ADD CONSTRAINT userrelations_senderuser_id_fkey FOREIGN KEY (senderuser_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;